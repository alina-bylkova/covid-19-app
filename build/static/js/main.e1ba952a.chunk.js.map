{"version":3,"sources":["Header.jsx","Card.jsx","Countries.jsx","Board.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Header","className","Component","Card","this","props","name","value","Countries","state","countryData","countries","Country","fetch","then","res","json","data","setState","htmlFor","id","onChange","e","document","querySelector","result","options","selectedIndex","res2","length","updateCountryData","console","log","map","element","key","Confirmed","Deaths","Recovered","Board","Global","TotalConfirmed","TotalDeaths","TotalRecovered","NewConfirmed","NewDeaths","NewRecovered","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e1ba952a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Header.css';\n\nexport default class Header extends Component {\n  render() {\n    return (\n      <header className=\"header\">\n        <h1>Corona App</h1>\n      </header>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport './Card.css';\n\nexport default class Card extends Component {\n  render() {\n    return (\n      <article className=\"card\">\n        <h1 className=\"title\">{this.props.name}</h1>\n        <h2 className=\"data\">{this.props.value}</h2>\n      </article>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Card from './Card';\n\nexport default class Countries extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      countryData: '',\n      countries: [{ Country: 'Norway' }],\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://api.covid19api.com/countries')\n      .then((res) => res.json())\n      .then((data) => this.setState({ countries: data }));\n  }\n\n  updateCountryData(data) {\n    this.setState({ countryData: data });\n  }\n\n  componentDidUpdate() {}\n\n  render() {\n    return (\n      <>\n        <form>\n          <label htmlFor=\"countries\">Choose a country</label>\n          <select\n            id=\"countries\"\n            onChange={() => {\n              const e = document.querySelector('#countries');\n              const result = e.options[e.selectedIndex].value;\n              fetch(`https://api.covid19api.com/total/country/${result}`)\n                .then((res) => res.json())\n                .then((res2) => res2[res2.length - 1])\n                .then((data) => this.updateCountryData(data));\n              console.log(this.state.countryData);\n            }}\n          >\n            {this.state.countries.map((element) => {\n              return (\n                <option value={element.Country} key={element.Country}>\n                  {element.Country}\n                </option>\n              );\n            })}\n          </select>\n        </form>\n        <h1>Country</h1>\n        <Card value={this.state.countryData.Confirmed} name=\"Total Confirmed Cases\" />\n        <Card value={this.state.countryData.Deaths} name=\"Total Dead\" />\n        <Card value={this.state.countryData.Recovered} name=\"Total Recovered\" />\n      </>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Card from './Card';\nimport './Board.css';\nimport Countries from './Countries';\n\nexport default class Board extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: '',\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://api.covid19api.com/summary')\n      .then((res) => res.json())\n      .then((result) => this.setState({ data: result.Global }));\n  }\n\n  componentDidUpdate() {}\n\n  render() {\n    return (\n      <>\n        <h1>Global statistics to date</h1>\n        <main className=\"board\">\n          <Card value={this.state.data.TotalConfirmed} name=\"Total confirmed cases\" />\n          <Card value={this.state.data.TotalDeaths} name=\"Total deaths\" />\n          <Card value={this.state.data.TotalRecovered} name=\"Total recoveries\" />\n        </main>\n        <h1>Daily statistics</h1>\n        <section className=\"board\">\n          <Card value={this.state.data.NewConfirmed} name=\"New confirmed cases\" />\n          <Card value={this.state.data.NewDeaths} name=\"New deaths\" />\n          <Card value={this.state.data.NewRecovered} name=\"New recoveries\" />\n        </section>\n        <Countries />\n      </>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Header from './Header';\nimport Board from './Board';\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <Header />\n        <Board />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}